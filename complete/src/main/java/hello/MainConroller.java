package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.Particle;
import hello.ParticleRepository;

@Controller
@RequestMapping(path="/demo")
public class MainConroller {
    @Autowired // This means to get the bean called PersonRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ParticleRepository particleRepository;

    @GetMapping(path="/add") // Adding new particle through a GET request
    public @ResponseBody String addNewParticle (@RequestParam String name
            , @RequestParam double mass, @RequestParam double charge) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET

        //only add if there particle is not already in the database
        Iterable<Particle> parts = getParticleByName(name);
        if(parts.iterator().hasNext()){
            return "There is already a " + name + " in the database";
        }else{
            Particle p = new Particle();
            p.setName(name);
            p.setCharge(charge);
            p.setMass(mass);
            particleRepository.save(p);
            return "Saved: " + name + " with mass " + mass + " MeV and charge " + charge;
        }
    }

    @PostMapping(path="/post") // Adding new particle through a POST request
    public @ResponseBody String postNewParticle (@RequestBody Particle part) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestBody means it is a parameter from the GET or POST request
        // The Particle object is automatically created from the JSON object, which is
        // the data parameter of the POST request
        Iterable<Particle> parts = getParticleByName(part.getName());
        if(parts.iterator().hasNext()){
            return "There is already a " + part.getName() + " in the database";
        }else {
            particleRepository.save(part);
            return "Saved: " + part.getName() + " with mass " + part.getMass() + " MeV and charge "
                    + part.getCharge();
        }
    }

    @DeleteMapping(path="/delete") //Delete particle with a given name
    public @ResponseBody String deleteParticleByName(@RequestParam String name) {
        Iterable<Particle> parts = getParticleByName(name);
        if (parts.iterator().hasNext()) {
            particleRepository.delete(parts);
            return "Deleted particles with name " + name;
        } else {
            return "No such entity to delete";
        }

    }

    @GetMapping(path="/all") //Return all particles
    public @ResponseBody Iterable<Particle> getAllParticles() {
        return particleRepository.findAll();
    }

    //These custom GET requests calls autogenerated queries defined in the
    //ParticleRepository interface

    @GetMapping(path="/findByName") //Return all particles with a given name
    public @ResponseBody Iterable<Particle> getParticleByName(@RequestParam String name) {
        return particleRepository.findByName(name);
    }

    @GetMapping(path="/findByMassGtr") //Return all particles with mass greater than mass
    public @ResponseBody Iterable<Particle> getParticlesByMassGtr(@RequestParam double mass) {
        return particleRepository.findByMassGtr(mass);
    }

    @GetMapping(path="/findByMassLess") //Return all particles with mass less than mass
    public @ResponseBody Iterable<Particle> getParticlesByMassLess(@RequestParam double mass) {
        return particleRepository.findByMassLess(mass);
    }

    @GetMapping(path="/findByCharge") //Return all particles with a given charge
    public @ResponseBody Iterable<Particle> getParticlesByCharge(@RequestParam double charge) {
        return particleRepository.findByCharge(charge);
    }
}
